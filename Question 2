//2.40% of the WETH needs to use the following logic:
//   a. swap 50% of the WETH to USDT using WOOFi V2
//   b. swap 50% of the WETH to USDT using TraderJoe V2.1



import web3
import json

def swap_wETH(web3, wETH_address, amount):
  """Swaps WETH for USDT using WOOFi V2 and TraderJoe V2.1.

  Args:
    web3: A Web3 instance.
    wETH_address: The address of the WETH token.
    amount: The amount of WETH to swap.

  Returns:
    The transaction hash of the swap.
  """

  woofi_router = web3.eth.contract(
      address=woofi_router_address, abi=woofi_router_abi)

  traderjoe_router = web3.eth.contract(
      address=traderjoe_router_address, abi=traderjoe_router_abi)

  txn_hash = woofi_router.functions.swapExactETHForTokens(
      amount / 2, [traderjoe_usdt_address], [wETH_address]).transact()

  
  txn_hash += traderjoe_router.functions.swapExactETHForTokens(
      amount / 2, [wETH_address], [traderjoe_usdt_address]).transact()

  return txn_hash

if __name__ == "__main__":
  # Initialize Web3.
  web3 = Web3(Web3.WebsocketProvider("wss://arbitrum-mainnet.infura.io/ws/v3/"))

  # Load the smart contract ABIs.
  with open("swaper.abi", "r") as f:
    swaper_abi = json.load(f)

  with open("woofi_router.abi", "r") as f:
    woofi_router_abi = json.load(f)

  with open("traderjoe_router.abi", "r") as f:
    traderjoe_router_abi = json.load(f)

  # Deploy the smart contract.
  swaper = web3.eth.contract(abi=swaper_abi)
  swaper_address = swaper.deploy().wait().address

  # Swap 10 WETH.
  txn_hash = swap_wETH(web3, wETH_address, 10)

  # Print the transaction hash.
  print(txn_hash)

