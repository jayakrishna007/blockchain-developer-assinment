import web3
import json

# Connect to the Arbitrum network
web3 = web3.Web3(Web3.HTTPProvider('https://arb1.arbitrum.io/rpc'))

# Load the WOOFi V2 smart contract
woofi_contract = web3.eth.contract(address='0xaec457f058d36243f80b6f33c1e31510e332a6b0', abi=json.loads('[{"inputs": [{"name": "token", "type": "address"}], "name": "swap", "outputs": [{"name": "amount", "type": "uint256"}], "stateMutability": "nonpayable", "type": "function"}]'))

# Load the TraderJoe V2.1 smart contract
traderjoe_contract = web3.eth.contract(address='0x5c120011af39e1298d540401d1f7b598b2b7341e', abi=json.loads('[{"inputs": [{"name": "token", "type": "address"}], "name": "swap", "outputs": [{"name": "amount", "type": "uint256"}], "stateMutability": "nonpayable", "type": "function"}]'))

def swap(contract, token, amount):
  """Swaps the specified amount of the token for USDT."""
  return contract.functions.swap(token, amount).call()

def main():
  """The main function."""
  # Get the WETH address
  weth_address = web3.eth.contract(address='0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2').address

  # Swap 40% of the WETH to USDT using WOOFi V2
  amount = 10 * 0.4
  usdt_amount_woofi_v2 = swap(woofi_contract, weth_address, amount)

  # Swap 40% of the WETH to USDT using TraderJoe V2.1
  usdt_amount_traderjoe_v2 = swap(traderjoe_contract, weth_address, amount)

  # Send a single transaction to do the above swap
  transaction = web3.eth.sendTransaction({
    'from': web3.eth.defaultAccount,
    'to': weth_address,
    'value': 0,
    'data': woofi_contract.encodeABI('swap', [weth_address, amount]),
    'gasPrice': web3.eth.gasPrice
  })

  # Wait for the transaction to be mined
  transaction.wait()

  print('Successfully swapped 10 WETH in an optimal way on Arbitrum!')
  print('USDT amount received from WOOFi V2:', usdt_amount_woofi_v2)
  print('USDT amount received from TraderJoe V2.1:', usdt_amount_traderjoe_v2)

if __name__ == '__main__':
  main()
